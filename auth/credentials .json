// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// 🎴 𝛫𝑈𝑅𝛩𝛮𝛥 — 𝐶𝑅𝐸𝐷𝐸𝑁𝑇𝐼𝐴𝐿 🎴
// Gestion centralisée des credentials et signedPreKey
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

import fs from "fs";
import path from "path";
import { generateSignedPreKey, useSingleFileAuthState } from '@whiskeysockets/baileys';

const SESSION_PATH = path.join(process.cwd(), "session", "auth_info_baileys.json");

// Durée maximale avant régénération d'une signedPreKey (30 jours)
const MAX_PREKEY_AGE = 30 * 24 * 60 * 60; // en secondes

// Charger la session existante
const { state, saveState } = useSingleFileAuthState(SESSION_PATH);

/**
 * Vérifie si la signedPreKey est expirée
 */
function isPreKeyExpired() {
  const created = state.creds.signedPreKey?.created || 0;
  const now = Math.floor(Date.now() / 1000);
  return now - created >= MAX_PREKEY_AGE;
}

/**
 * Régénère la signedPreKey et sauvegarde
 */
async function regenerateSignedPreKey() {
  const keyId = state.creds.signedPreKey?.keyId || 1;
  const newPreKey = generateSignedPreKey(state.creds.signedIdentityKey, keyId);

  state.creds.signedPreKey = {
    keyId: newPreKey.keyId,
    public: newPreKey.keyPair.public.toString("base64"),
    private: newPreKey.keyPair.private.toString("base64"),
    signature: newPreKey.signature.toString("base64"),
    created: Math.floor(Date.now() / 1000)
  };

  saveState();
  console.log(`✅ Nouvelle signedPreKey générée (keyId=${keyId}, timestamp=${state.creds.signedPreKey.created})`);
}

/**
 * Vérification automatique de la signedPreKey au démarrage et toutes les 24h
 */
export async function autoCheckAndRegen() {
  if (isPreKeyExpired()) {
    console.log("⚠️ signedPreKey expirée ou trop vieille. Régénération...");
    await regenerateSignedPreKey();
  } else {
    const created = state.creds.signedPreKey.created;
    console.log(`✅ signedPreKey encore valide (créée le ${new Date(created * 1000).toLocaleString()})`);
  }
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// FONCTIONS D'ACCÈS AUX CREDENTIALS
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

export function getCredentials() {
  return state.creds;
}

export function saveCredentials() {
  saveState();
  console.log("💾 Credentials sauvegardés avec succès !");
}

// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
// EXÉCUTION AUTOMATIQUE
// ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
autoCheckAndRegen().catch(console.error);
setInterval(autoCheckAndRegen, 24 * 60 * 60 * 1000); // toutes les 24h
